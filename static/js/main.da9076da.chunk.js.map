{"version":3,"sources":["theme/model.ts","theme/components/ThemeSwitch.tsx","chat/reducer.ts","chat/actions.ts","chat/components/ChatHistory.tsx","chat/defaults.ts","chat/components/ChatInput.tsx","chat/components/ChatErrors.tsx","store/reducer.ts","theme/defaults.ts","store/hooks.ts","theme/containers/ThemeSwitch.tsx","theme/actions.ts","theme/reducer.ts","app/components/UnitProcessesMUI.js","app/components/TreatmentTrains.js","app/components/Learn.tsx","app/components/App.tsx","app/containers/App.tsx","index.tsx","store/store.ts"],"names":["colors","main","secondary","lightTheme","createMuiTheme","palette","primary","type","darkTheme","useStyles","makeStyles","root","display","gridTemplateColumns","alignItems","icon","margin","ThemeSwitch","theme","onToggleTheme","classes","className","Switch","checked","onChange","color","chatReducer","state","action","messages","push","message","filter","m","timestamp","console","log","error","errors","ImmutableList","messageCard","marginTop","spacing","marginBottom","messageCardContent","paddingBottom","defaultChatState","gridColumnGap","buttons","justifyContent","marginLeft","snackbarContent","common","white","backgroundColor","dark","closeIcon","text","defaultState","chat","rootReducer","themeReducer","useTypedDispatch","useDispatch","useTypedState","selector","useSelector","s","dispatch","chipContainer","flexWrap","data","unitProcesses","UnitProcesses","columns","field","headerName","flex","renderCell","params","columnTitles","map","column","index","Tooltip","title","Chip","label","getValue","key","size","getPollutantRemovalEfficiencies","getRecovery","style","opacity","getEvaluationCriteria","getUsefulLife","flexGrow","rows","pageSize","hideFooter","overflow","lineHeight","whiteSpace","treatmentTrains","TreatmentTrains","UPList","up","name","getUnitProcesses","rowHeight","toolbar","justifyItems","height","width","gridRowGap","paddingLeft","paddingRight","paddingTop","textAlign","Learn","React","useState","menuPoint","setMenuPoint","Paper","square","elevation","Tabs","value","event","newValue","indicatorColor","textColor","centered","Tab","to","component","Link","exact","path","App","AppBar","Toolbar","IconButton","Typography","ThemeProvider","CssBaseline","store","createStore","composeWithDevTools","applyMiddleware","thunk","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.da9076da.chunk.js","sourcesContent":["import { createMuiTheme, Theme } from '@material-ui/core'\n\nexport type ThemeState = Theme\n\n/* const colors = {\n  main: '#00bcd4',\n  light: '#62efff',\n  dark: '#008ba3'\n} */\n\nconst colors = {\n  main: '#00838f'\n}\n\nconst secondary = {\n  main: '#ef6c00'\n}\n\nexport const theme: Theme = createMuiTheme({\n  palette: {\n    primary: colors,\n    secondary: secondary\n  }\n})\n\nexport const lightTheme: Theme = createMuiTheme({\n  palette: {\n    primary: colors,\n    secondary: secondary,\n    type: 'light'\n  }\n})\n\nexport const darkTheme: Theme = createMuiTheme({\n  palette: {\n    primary: colors,\n    secondary: secondary,\n    type: 'dark'\n  }\n})\n","import DarkThemeIcon from '@material-ui/icons/Brightness2'\nimport LightThemeIcon from '@material-ui/icons/WbSunny'\nimport * as React from 'react'\nimport { Switch, Theme } from '@material-ui/core'\nimport { darkTheme } from '../model'\nimport makeStyles from '@material-ui/core/styles/makeStyles'\n\nconst useStyles = makeStyles({\n  root: {\n    display: 'grid',\n    gridTemplateColumns: 'auto 1fr auto',\n    alignItems: 'center'\n  },\n  icon: {\n    margin: 4\n  }\n})\n\nexport interface Props {\n  readonly theme: Theme\n  readonly onToggleTheme: () => void\n}\n\nexport const ThemeSwitch = ({ theme, onToggleTheme }: Props) => {\n  const classes = useStyles(theme)\n  return (\n    <div className={classes.root}>\n      <LightThemeIcon className={classes.icon} />\n      <Switch checked={theme === darkTheme} onChange={onToggleTheme} color={'default'} />\n      <DarkThemeIcon className={classes.icon} />\n    </div>\n  )\n}\n","import { ChatState } from './model'\nimport { ADD_CHAT_ERROR, ADD_MESSAGE, ChatAction, DELETE_MESSAGE, DISMISS_CHAT_ERRORS } from './actions'\nimport { List as ImmutableList } from 'immutable'\n\nexport const chatReducer = (state: ChatState, action: ChatAction): ChatState => {\n  switch (action.type) {\n    case ADD_MESSAGE:\n      return {\n        ...state,\n        messages: state.messages.push(action.message)\n      }\n    case DELETE_MESSAGE:\n      return {\n        ...state,\n        messages: state.messages.filter(m => m.timestamp !== action.timestamp)\n      }\n    case ADD_CHAT_ERROR:\n      console.log(action.error.error)\n      return {\n        ...state,\n        errors: state.errors.push(action.error)\n      }\n    case DISMISS_CHAT_ERRORS:\n      return {\n        ...state,\n        errors: ImmutableList()\n      }\n    default:\n      return state\n  }\n}\n","import { ChatError, Message } from './model'\nimport { Dispatch } from 'redux'\n\nexport const ADD_MESSAGE = 'chat/ADD_MESSAGE'\nexport const DELETE_MESSAGE = 'chat/DELETE_MESSAGE'\n\nexport const ADD_CHAT_ERROR = 'chat/ADD_CHAT_ERROR'\nexport const DISMISS_CHAT_ERRORS = 'chat/DISMISS_CHAT_ERRORS'\n\nexport type ChatAction = AddMessageAction | DeleteMessageAction | AddChatErrorAction | DismissChatErrorsAction\n\nexport interface AddMessageAction {\n  readonly type: typeof ADD_MESSAGE\n  readonly message: Message\n}\n\nexport const addMessage = (text: string, timestamp?: number): AddMessageAction => {\n  return {\n    type: ADD_MESSAGE,\n    message: {\n      text,\n      timestamp: timestamp || Date.now()\n    }\n  }\n}\n\nexport interface DeleteMessageAction {\n  readonly type: typeof DELETE_MESSAGE\n  readonly timestamp: number\n}\n\nexport const deleteMessage = (timestamp: number): DeleteMessageAction => {\n  return {\n    type: DELETE_MESSAGE,\n    timestamp\n  }\n}\n\nexport const fetchMessage = (serviceUrl: string) => {\n  return (dispatch: Dispatch<ChatAction>): Promise<ChatAction> => {\n    return fetch(serviceUrl)\n      .then(response => {\n        if (response.ok) {\n          return response.text()\n        }\n        throw new Error('Network response not ok.')\n      })\n      .then(message => dispatch(addMessage(message)))\n      .catch(error => dispatch(addChatError(error.message)))\n  }\n}\n\nexport interface AddChatErrorAction {\n  readonly type: typeof ADD_CHAT_ERROR\n  readonly error: ChatError\n}\n\nexport const addChatError = (error: string): AddChatErrorAction => {\n  return {\n    type: ADD_CHAT_ERROR,\n    error: {\n      error\n    }\n  }\n}\n\nexport interface DismissChatErrorsAction {\n  readonly type: typeof DISMISS_CHAT_ERRORS\n}\n\nexport const dismissChatErrors = (): DismissChatErrorsAction => {\n  return {\n    type: DISMISS_CHAT_ERRORS\n  }\n}\n","import { List as ImmutableList } from 'immutable'\nimport { Message } from '../model'\nimport { Card, Theme } from '@material-ui/core'\nimport React from 'react'\nimport CardContent from '@material-ui/core/CardContent'\nimport Typography from '@material-ui/core/Typography'\nimport makeStyles from '@material-ui/core/styles/makeStyles'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport IconButton from '@material-ui/core/IconButton'\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  messageCard: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1)\n  },\n  messageCardContent: {\n    display: 'grid',\n    gridTemplateColumns: '1fr auto',\n    '&:last-child': {\n      // override material-ui default\n      paddingBottom: theme.spacing(2)\n    }\n  }\n}))\n\nexport interface Props {\n  readonly messages: ImmutableList<Message>\n  readonly onDeleteMessage: (timestamp: number) => void\n}\n\nexport const ChatHistory = ({ messages, onDeleteMessage }: Props) => {\n  const classes = useStyles()\n  const onDeleteButtonClick = (timestamp: number) => () => onDeleteMessage(timestamp)\n  return (\n    <div>\n      {messages.map(message => (\n        <Card key={message.timestamp} className={classes.messageCard}>\n          <CardContent className={classes.messageCardContent}>\n            <Typography>{message.text}</Typography>\n            <IconButton aria-label=\"delete\" onClick={onDeleteButtonClick(message.timestamp)}>\n              <DeleteIcon />\n            </IconButton>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  )\n}\n","import { ChatState } from './model'\nimport { List as ImmutableList } from 'immutable'\n\nexport const defaultChatState: ChatState = {\n  messages: ImmutableList([\n    {\n      timestamp: 1568011059155,\n      text: 'This pretends to be a chat, but is just a list of one line messages 🤷🏼‍♀️'\n    },\n    {\n      timestamp: 1568011059165,\n      text: 'Hey there!'\n    }\n  ]),\n  errors: ImmutableList()\n}\n","import { TextField, Theme } from '@material-ui/core'\nimport React, { ChangeEvent, KeyboardEvent, useState } from 'react'\nimport makeStyles from '@material-ui/core/styles/makeStyles'\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload'\nimport ErrorIcon from '@material-ui/icons/Error'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport Button from '@material-ui/core/Button'\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    display: 'grid',\n    gridTemplateColumns: '50% auto',\n    gridColumnGap: theme.spacing(1),\n    alignItems: 'center'\n  },\n  buttons: {\n    display: 'grid',\n    gridTemplateColumns: 'auto auto',\n    gridColumnGap: theme.spacing(1),\n    justifyContent: 'right',\n    alignItems: 'center'\n  },\n  icon: {\n    marginLeft: theme.spacing(1)\n  }\n}))\n\nexport interface Props {\n  readonly onAddMessage: (text: string) => void\n  readonly onFetchAsyncMessage: () => void\n  readonly onDemoError: () => void\n}\n\nexport const ChatInput = ({ onAddMessage, onFetchAsyncMessage, onDemoError }: Props) => {\n  const classes = useStyles()\n  const [message, setMessage] = useState<string>('')\n\n  const onChange = (e: ChangeEvent<HTMLInputElement>) => setMessage(e.target.value)\n  const onKeyPress = (e: KeyboardEvent<HTMLDivElement>) => {\n    if (e.key === 'Enter' && message.trim().length !== 0) {\n      onAddMessage(message)\n      setMessage('')\n    }\n  }\n\n  return (\n    <div className={classes.root}>\n      <TextField\n        value={message}\n        label=\"Compose Message\"\n        variant=\"outlined\"\n        onChange={onChange}\n        onKeyPress={onKeyPress}\n      />\n      <div className={classes.buttons}>\n        <Tooltip title={'Fetch Async Message'}>\n          <Button color=\"primary\" variant=\"outlined\" onClick={onFetchAsyncMessage}>\n            Async\n            <CloudDownloadIcon className={classes.icon} />\n          </Button>\n        </Tooltip>\n        <Tooltip title={'Demo Error Handling'}>\n          <Button color=\"secondary\" variant=\"outlined\" onClick={onDemoError}>\n            Error\n            <ErrorIcon className={classes.icon} />\n          </Button>\n        </Tooltip>\n      </div>\n    </div>\n  )\n}\n","import { List as ImmutableList } from 'immutable'\nimport { ChatError } from '../model'\nimport React, { useEffect, useState } from 'react'\nimport { Snackbar, Theme } from '@material-ui/core'\nimport SnackbarContent from '@material-ui/core/SnackbarContent'\nimport IconButton from '@material-ui/core/IconButton'\nimport CloseIcon from '@material-ui/icons/Close'\nimport makeStyles from '@material-ui/core/styles/makeStyles'\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  snackbarContent: {\n    color: theme.palette.common.white,\n    backgroundColor: theme.palette.error.dark\n  },\n  closeIcon: {\n    color: theme.palette.common.white\n  }\n}))\n\nexport interface Props {\n  readonly errors: ImmutableList<ChatError>\n  readonly onDismissErrors: () => void\n}\n\nexport const ChatErrors = ({ errors, onDismissErrors }: Props) => {\n  const classes = useStyles()\n  const [openSnackbar, setOpenSnackbar] = useState<boolean>(false)\n\n  useEffect(() => setOpenSnackbar(errors.size > 0), [errors.size])\n\n  // noinspection JSUnusedGlobalSymbols\n  const preventClickAway = { onClickAway: () => null }\n\n  return (\n    <Snackbar open={openSnackbar} ClickAwayListenerProps={preventClickAway}>\n      <SnackbarContent\n        className={classes.snackbarContent}\n        message={`${errors.size} error(s) – check Console...`}\n        action={[\n          <IconButton className={classes.closeIcon} key=\"close\" aria-label=\"close\" onClick={onDismissErrors}>\n            <CloseIcon />\n          </IconButton>\n        ]}\n      />\n    </Snackbar>\n  )\n}\n","import { ThemeAction, themeReducer } from '../theme'\nimport { ChatAction, chatReducer } from '../chat'\nimport { RootAction } from './actions'\nimport { RootState } from './model'\nimport { defaultChatState } from '../chat/defaults'\nimport { defaultTheme } from '../theme/defaults'\n\nconst defaultState = {\n  theme: defaultTheme,\n  chat: defaultChatState\n}\n\nexport const rootReducer = (state: RootState = defaultState, action: RootAction) => ({\n  theme: themeReducer(state.theme, action as ThemeAction),\n  chat: chatReducer(state.chat, action as ChatAction)\n})\n","import { Theme } from '@material-ui/core'\nimport { lightTheme } from './model'\n\nexport const defaultTheme: Theme = lightTheme\n","import { useDispatch, useSelector } from 'react-redux'\nimport { ThunkDispatch } from 'redux-thunk'\nimport { RootState } from './model'\nimport { RootAction } from './actions'\n\n// A type-safe/domain-specific wrapper around the Redux useDispatch hook (see https://react-redux.js.org/api/hooks#usedispatch)\nexport const useTypedDispatch = <A extends RootAction>() => useDispatch<ThunkDispatch<RootState, {}, A>>()\n\n// A type-safe/domain-specific wrapper around the Redux useSelector hook (see https://react-redux.js.org/api/hooks#useselector)\nexport const useTypedState = <T>(selector: (state: RootState) => T): T => useSelector<RootState, T>(selector)\n","import * as React from 'react'\nimport { ThemeSwitch as ThemeSwitchComp } from '../components/ThemeSwitch'\nimport { ThemeAction } from '../actions'\nimport { toggleTheme } from '../index'\nimport { useTypedDispatch, useTypedState } from '../../store'\nimport { Theme } from '@material-ui/core'\n\nexport const ThemeSwitch = () => {\n  const theme = useTypedState<Theme>(s => s.theme)\n  const dispatch = useTypedDispatch<ThemeAction>()\n  const onToggleTheme = () => dispatch(toggleTheme())\n  return <ThemeSwitchComp theme={theme} onToggleTheme={onToggleTheme} />\n}\n","export const TOGGLE_THEME = 'theme/TOGGLE_THEME'\n\nexport type ThemeAction = ToggleThemeAction\n\nexport interface ToggleThemeAction {\n  readonly type: typeof TOGGLE_THEME\n}\n\nexport const toggleTheme = (): ToggleThemeAction => {\n  return {\n    type: TOGGLE_THEME\n  }\n}\n","import { ThemeAction, TOGGLE_THEME } from './actions'\nimport { darkTheme, lightTheme, ThemeState } from './model'\n\nexport const themeReducer = (state: ThemeState, action: ThemeAction): ThemeState => {\n  if (action.type === TOGGLE_THEME) {\n    return state.palette.type === 'light' ? darkTheme : lightTheme\n  } else {\n    return state\n  }\n}\n","import * as React from 'react'\nimport { DataGrid } from '@material-ui/data-grid'\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport unitProcesses from '../data/unitProcesses.json'\nimport Chip from '@material-ui/core/Chip'\nimport Tooltip from '@material-ui/core/Tooltip'\n\nconst useStyles = makeStyles({\n  root: {\n    '& .wrapperHeader': {\n      backgroundColor: 'rgba(255, 7, 0, 0.55)'\n    }\n    /*     '& .MuiDataGrid-colCellTitle': {\n      whiteSpace: 'initial'\n    },\n    '& .MuiDataGrid-columnsContainer': {\n      lineHeight: 'inherit'\n    }, */\n  },\n  chipContainer: {\n    display: 'flex',\n    justifyContent: 'center',\n    flexWrap: 'wrap',\n    '& > *': {\n      margin: 2\n    }\n  }\n})\n\nconst data = unitProcesses\n\nexport default function UnitProcesses() {\n  const classes = useStyles()\n\n  function getPollutantRemovalEfficiencies(params) {\n    const columns = ['turbidity', 'tss', 'bod', 'cod', 'fc', 'tc']\n    const columnTitles = ['Turbidity', 'TSS', 'BOD', 'COD', 'FC', 'TC']\n\n    return (\n      <div className={classes.chipContainer}>\n        {columns.map((column, index) => (\n          <Tooltip title={columnTitles[index]}>\n            <Chip label={params.getValue(column)} key={index} size=\"small\" />\n          </Tooltip>\n        ))}\n      </div>\n    )\n  }\n\n  function getRecovery(params) {\n    return (\n      <div className={classes.chipContainer}>\n        <Chip label={params.getValue('recovery')} size=\"small\" />\n      </div>\n    )\n  }\n\n  function getEvaluationCriteria(params) {\n    const columns = [\n      'ease_to_upgrade',\n      'adaptability_to_varying_flow',\n      'adaptability_to_varying_quality',\n      'ease_of_om',\n      'ease_of_construction',\n      'ease_of_demonstration',\n      'power_demand',\n      'chemical_demand',\n      'odor_generation',\n      'impact_on_ground_water',\n      'land_requirements',\n      'cost_of_treatment',\n      'waste'\n    ]\n    const columnTitles = [\n      'ease to upgrade',\n      'adaptability to varying flow',\n      'adaptability to varying quality',\n      'ease of O & M',\n      'ease of construction',\n      'ease of demonstration',\n      'power demand',\n      'chemical_demand',\n      'odor generation',\n      'impact on ground water',\n      'land requirements',\n      'cost of treatment',\n      'waste'\n    ]\n\n    return (\n      <div className={classes.chipContainer}>\n        {columns.map((column, index) => (\n          <Tooltip title={columnTitles[index]}>\n            <Chip\n              label={params.getValue(column)}\n              key={index}\n              size=\"small\"\n              color=\"primary\"\n              style={{ opacity: 0.25 + params.getValue(column) / 4 }}\n            />\n          </Tooltip>\n        ))}\n      </div>\n    )\n  }\n\n  function getUsefulLife(params) {\n    return (\n      <div className={classes.chipContainer}>\n        <Chip label={params.getValue('useful_life')} size=\"small\" />\n      </div>\n    )\n  }\n\n  const columns = [\n    {\n      field: 'id',\n      headerName: 'ID',\n      flex: 0.25\n    },\n    {\n      field: 'name',\n      headerName: 'Name',\n      flex: 0.5\n    },\n    {\n      field: 'turbidity',\n      headerName: 'Pollutant Removal Efficiencies [% removal]',\n      flex: 1,\n      renderCell: params => {\n        return getPollutantRemovalEfficiencies(params)\n      }\n    },\n    {\n      field: 'recovery',\n      headerName: 'Recovery [%]',\n      flex: 0.5,\n      renderCell: params => {\n        return getRecovery(params)\n      }\n    },\n    {\n      field: 'ease_to_upgrade',\n      headerName: 'Evaluation Criteria [0-3]',\n      flex: 1.5,\n      renderCell: params => {\n        return getEvaluationCriteria(params)\n      }\n    },\n    {\n      field: 'useful_life',\n      headerName: 'Useful Life [yrs]',\n      flex: 0.5,\n      renderCell: params => {\n        return getUsefulLife(params)\n      }\n    }\n  ]\n\n  return (\n    <div style={{ flexGrow: 1 }} className={classes.root}>\n      <DataGrid rows={data} columns={columns} pageSize={100} hideFooter />\n    </div>\n  )\n}\n","import * as React from 'react'\nimport { DataGrid } from '@material-ui/data-grid'\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport treatmentTrains from '../data/treatmentTrains.json'\nimport Chip from '@material-ui/core/Chip'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport unitProcesses from '../data/unitProcesses.json'\n\nconst useStyles = makeStyles({\n  chipContainer: {\n    display: 'flex',\n    justifyContent: 'center',\n    flexWrap: 'wrap',\n    '& > *': {\n      margin: 2\n    }\n  },\n  root: {\n    '& .MuiDataGrid-cellLeft': {\n      overflow: 'overlay',\n      lineHeight: '20px !important',\n      whiteSpace: 'break-spaces'\n    }\n  }\n})\n\nconst data = treatmentTrains\n\nexport default function TreatmentTrains() {\n  const classes = useStyles()\n\n  function getUnitProcesses(params) {\n    const UPList = params.getValue('unit_processes')\n\n    console.log(UPList)\n    console.log(unitProcesses)\n\n    return (\n      <div className={classes.chipContainer}>\n        {UPList.map((up, index) => (\n          <Tooltip title={unitProcesses[up - 1].name}>\n            <Chip label={up} key={index} size=\"small\" color=\"primary\" />\n          </Tooltip>\n        ))}\n      </div>\n    )\n  }\n\n  const columns = [\n    {\n      field: 'id',\n      headerName: 'ID',\n      flex: 0.25\n    },\n    {\n      field: 'category',\n      headerName: 'Category',\n      flex: 0.3\n    },\n    {\n      field: 'title',\n      headerName: 'Title',\n      flex: 0.5\n    },\n    {\n      field: 'description',\n      headerName: 'Description',\n      flex: 1.5,\n      type: 'string'\n    },\n    {\n      field: 'case_study',\n      headerName: 'Case Study',\n      flex: 0.5\n    },\n    {\n      field: 'unit_processes',\n      headerName: 'Unit Processes',\n      flex: 1,\n      renderCell: params => {\n        return getUnitProcesses(params)\n      }\n    }\n  ]\n\n  return (\n    <div style={{ flexGrow: 1 }} className={classes.root}>\n      <DataGrid className={classes.root} rows={data} columns={columns} pageSize={100} rowHeight={120} hideFooter />\n    </div>\n  )\n}\n","import React from 'react'\n\nimport makeStyles from '@material-ui/core/styles/makeStyles'\nimport UnitProcesses from './UnitProcessesMUI'\n\nimport TreatmentTrains from './TreatmentTrains'\nimport { BrowserRouter as Router, Link, Route, Switch } from 'react-router-dom'\nimport Paper from '@material-ui/core/Paper'\nimport Tabs from '@material-ui/core/Tabs'\nimport Tab from '@material-ui/core/Tab'\n\nconst useStyles = makeStyles({\n  toolbar: {\n    display: 'grid',\n    gridTemplateColumns: 'auto 1fr auto',\n    justifyItems: 'center',\n    justifyContent: 'space-between'\n  },\n  main: {\n    display: 'grid',\n    height: '100vh',\n    width: '100vw',\n    gridTemplateColumns: '1fr',\n    gridRowGap: 8,\n    justifyItems: 'stretch',\n    justifyContent: 'center',\n    paddingLeft: '10vw',\n    paddingRight: '10vw',\n    paddingTop: 50\n  },\n  title: {\n    textAlign: 'left'\n  },\n  root: {\n    flexGrow: 1,\n    paddingTop: 60\n  }\n})\n\nexport const Learn = () => {\n  const classes = useStyles()\n\n  const [menuPoint, setMenuPoint] = React.useState(0)\n\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    setMenuPoint(newValue)\n  }\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Paper className={classes.root} square elevation={3}>\n          <Tabs value={menuPoint} onChange={handleChange} indicatorColor=\"primary\" textColor=\"primary\" centered>\n            <Tab label=\"General Reference\" />\n            <Tab label=\"PESTLE\" />\n            <Tab label=\"Unit Processes\" to=\"/unitprocesses\" component={Link} />\n            <Tab label=\"Treatment Trains\" to=\"/treatmenttrains\" component={Link} />\n            <Tab label=\"Case Studies\" />\n          </Tabs>\n        </Paper>\n\n        <div className={classes.main}>\n          <Switch>\n            <Route exact path=\"/learn/\" component={UnitProcesses} />\n            <Route path=\"/unitprocesses\" component={UnitProcesses} />\n            <Route path=\"/treatmenttrains\" component={TreatmentTrains} />\n          </Switch>\n        </div>\n      </Router>\n    </div>\n  )\n}\n","import React from 'react'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport { ThemeSwitch } from '../../theme'\nimport makeStyles from '@material-ui/core/styles/makeStyles'\nimport Typography from '@material-ui/core/Typography'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport IconButton from '@material-ui/core/IconButton'\nimport MenuBookIcon from '@material-ui/icons/MenuBook'\nimport AddBoxIcon from '@material-ui/icons/AddBox'\nimport ShowChartIcon from '@material-ui/icons/ShowChart'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport { Learn } from './Learn'\n\nconst useStyles = makeStyles({\n  toolbar: {\n    display: 'grid',\n    gridTemplateColumns: 'auto 1fr auto',\n    justifyItems: 'center',\n    justifyContent: 'space-between'\n  },\n  title: {\n    textAlign: 'left'\n  },\n  root: {\n    flexGrow: 1\n  }\n})\n\nexport const App = () => {\n  const classes = useStyles()\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <AppBar elevation={0}>\n          <Toolbar className={classes.toolbar}>\n            <div>\n              <Tooltip title=\"Learn\">\n                <IconButton color=\"inherit\">\n                  <MenuBookIcon />\n                </IconButton>\n              </Tooltip>\n              <Tooltip title=\"New Case\">\n                <IconButton color=\"inherit\">\n                  <AddBoxIcon />\n                </IconButton>\n              </Tooltip>\n              <Tooltip title=\"View Results\">\n                <IconButton color=\"default\">\n                  <ShowChartIcon />\n                </IconButton>\n              </Tooltip>\n            </div>\n            <div className={classes.title}>\n              <Typography>Poseidon Web alpha 0.1</Typography>\n            </div>\n            <ThemeSwitch />\n          </Toolbar>\n        </AppBar>\n\n        <div>\n          <Switch>\n            <Route path=\"/\" component={Learn} />\n            <Route path=\"/learn\" component={Learn} />\n            {/* <Route path=\"/case\" component={Case} /> */}\n          </Switch>\n        </div>\n      </Router>\n    </div>\n  )\n}\n","import { App as AppComponent } from '../components/App'\nimport * as React from 'react'\nimport { useTypedState } from '../../store'\nimport { CssBaseline, MuiThemeProvider as ThemeProvider, Theme } from '@material-ui/core'\n\nexport const App = () => {\n  // This is the only place we need to access the theme via our own model\n  // From here on, it is safe and convenient to use the `useTheme` hook\n  const theme = useTypedState<Theme>(s => s.theme)\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <AppComponent />\n    </ThemeProvider>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { App } from './app'\nimport { configureStore } from './store'\nimport { Provider } from 'react-redux'\n\nconst store = configureStore()\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n)\n\nReactDOM.render(<Root />, document.getElementById('root'))\n","import { createStore, Store, applyMiddleware } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport { rootReducer } from './reducer'\nimport { RootState } from './model'\nimport { RootAction } from './actions'\nimport thunk from 'redux-thunk'\n\nexport const configureStore = (): Store<RootState, RootAction> => {\n  return createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)))\n}\n"],"sourceRoot":""}